# coding: utf-8

"""
    さくらのVPS APIドキュメント

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 5.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List
from sakura_vps_client_py.models.server_monitoring_settings_health_check import ServerMonitoringSettingsHealthCheck
from sakura_vps_client_py.models.server_monitoring_settings_notification import ServerMonitoringSettingsNotification
from typing import Optional, Set
from typing_extensions import Self

class ServerMonitoringSettings(BaseModel):
    """
    ServerMonitoringSettings
    """ # noqa: E501
    enabled: StrictBool = Field(description="監視のON/OFF * true 監視ON * false 監視OFF")
    health_check: ServerMonitoringSettingsHealthCheck
    notification: ServerMonitoringSettingsNotification
    __properties: ClassVar[List[str]] = ["enabled", "health_check", "notification"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServerMonitoringSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of health_check
        if self.health_check:
            _dict['health_check'] = self.health_check.to_dict()
        # override the default output from pydantic by calling `to_dict()` of notification
        if self.notification:
            _dict['notification'] = self.notification.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServerMonitoringSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "enabled": obj.get("enabled"),
            "health_check": ServerMonitoringSettingsHealthCheck.from_dict(obj["health_check"]) if obj.get("health_check") is not None else None,
            "notification": ServerMonitoringSettingsNotification.from_dict(obj["notification"]) if obj.get("notification") is not None else None
        })
        return _obj


