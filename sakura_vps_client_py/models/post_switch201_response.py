# coding: utf-8

"""
    さくらのVPS APIドキュメント

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 5.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from sakura_vps_client_py.models.post_switch201_response_zone import PostSwitch201ResponseZone
from typing import Optional, Set
from typing_extensions import Self

class PostSwitch201Response(BaseModel):
    """
    PostSwitch201Response
    """ # noqa: E501
    id: StrictInt = Field(description="id")
    name: StrictStr = Field(description="名前")
    description: StrictStr = Field(description="説明")
    switch_code: StrictStr = Field(description="スイッチコード")
    zone: PostSwitch201ResponseZone
    server_interfaces: List[StrictInt] = Field(description="接続されているサーバーのインターフェースid")
    nfs_server_interfaces: List[StrictInt] = Field(description="接続されている追加ストレージ（NFS）のインターフェースid")
    external_connection: Optional[Dict[str, Any]] = Field(description="接続されている外部接続の情報")
    __properties: ClassVar[List[str]] = ["id", "name", "description", "switch_code", "zone", "server_interfaces", "nfs_server_interfaces", "external_connection"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PostSwitch201Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
            "switch_code",
            "server_interfaces",
            "nfs_server_interfaces",
            "external_connection",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of zone
        if self.zone:
            _dict['zone'] = self.zone.to_dict()
        # set to None if external_connection (nullable) is None
        # and model_fields_set contains the field
        if self.external_connection is None and "external_connection" in self.model_fields_set:
            _dict['external_connection'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PostSwitch201Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "switch_code": obj.get("switch_code"),
            "zone": PostSwitch201ResponseZone.from_dict(obj["zone"]) if obj.get("zone") is not None else None,
            "server_interfaces": obj.get("server_interfaces"),
            "nfs_server_interfaces": obj.get("nfs_server_interfaces"),
            "external_connection": obj.get("external_connection")
        })
        return _obj


