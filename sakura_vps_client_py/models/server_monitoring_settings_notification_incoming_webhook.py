# coding: utf-8

"""
    さくらのVPS APIドキュメント

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 5.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class ServerMonitoringSettingsNotificationIncomingWebhook(BaseModel):
    """
    incoming webhookでの通知の設定
    """ # noqa: E501
    enabled: StrictBool = Field(description="通知のON/OFF * true 通知ON * false 通知OFF")
    webhooks_url: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=500)]] = Field(description="通知先のWebhooksURL。 Slack、Discord、Microsoft TeamsのIncoming WebHooksにのみ対応しています。 指定できるURLは各サービスのWebhook URL(https://hooks.slack.com/services/* など)の形式に制限されています。 Discordの場合は[Slack互換のWebhook URL](https://discord.com/developers/docs/resources/webhook#execute-slackcompatible-webhook)を指定してください。")
    slack_team_name: StrictStr = Field(description="slackのteam name。VPSコントロールパネルの「Slackと自動で連携をする」を利用した場合に設定されます。")
    slack_channel_name: StrictStr = Field(description="slackのchannel name。VPSコントロールパネルの「Slackと自動で連携をする」を利用した場合に設定されます。")
    __properties: ClassVar[List[str]] = ["enabled", "webhooks_url", "slack_team_name", "slack_channel_name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServerMonitoringSettingsNotificationIncomingWebhook from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "slack_team_name",
            "slack_channel_name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if webhooks_url (nullable) is None
        # and model_fields_set contains the field
        if self.webhooks_url is None and "webhooks_url" in self.model_fields_set:
            _dict['webhooks_url'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServerMonitoringSettingsNotificationIncomingWebhook from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "enabled": obj.get("enabled"),
            "webhooks_url": obj.get("webhooks_url"),
            "slack_team_name": obj.get("slack_team_name"),
            "slack_channel_name": obj.get("slack_channel_name")
        })
        return _obj


