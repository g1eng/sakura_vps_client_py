# coding: utf-8

"""
    さくらのVPS APIドキュメント

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 5.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from sakura_vps_client_py.models.server_monitoring_settings import ServerMonitoringSettings
from typing import Optional, Set
from typing_extensions import Self

class ServerMonitoring(BaseModel):
    """
    ServerMonitoring
    """ # noqa: E501
    id: StrictInt = Field(description="id")
    name: Annotated[str, Field(strict=True, max_length=255)] = Field(description="名前")
    description: Annotated[str, Field(strict=True, max_length=10000)] = Field(description="説明")
    monitoring_resource_id: StrictStr = Field(description="監視リソースID")
    update_status: StrictStr = Field(description="更新ステータス * waiting 更新待ち * updating 更新中 * completed 更新完了 * error 更新エラー")
    settings: ServerMonitoringSettings
    __properties: ClassVar[List[str]] = ["id", "name", "description", "monitoring_resource_id", "update_status", "settings"]

    @field_validator('update_status')
    def update_status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['waiting', 'updating', 'completed', 'error']):
            raise ValueError("must be one of enum values ('waiting', 'updating', 'completed', 'error')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServerMonitoring from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
            "monitoring_resource_id",
            "update_status",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of settings
        if self.settings:
            _dict['settings'] = self.settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServerMonitoring from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "monitoring_resource_id": obj.get("monitoring_resource_id"),
            "update_status": obj.get("update_status"),
            "settings": ServerMonitoringSettings.from_dict(obj["settings"]) if obj.get("settings") is not None else None
        })
        return _obj


