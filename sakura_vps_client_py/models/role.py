# coding: utf-8

"""
    さくらのVPS APIドキュメント

    Sakura VPS API client written in Python (generated with openapi-generator)

    The version of the OpenAPI document: 4.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from sakura_vps_client_py.models.role_allowed_resources import RoleAllowedResources
from typing import Optional, Set
from typing_extensions import Self

class Role(BaseModel):
    """
    Role
    """ # noqa: E501
    id: StrictInt = Field(description="id")
    name: Annotated[str, Field(strict=True, max_length=100)] = Field(description="名前")
    description: Annotated[str, Field(strict=True, max_length=512)] = Field(description="説明")
    permission_filtering: StrictStr = Field(description="利用できる権限を制限するか")
    allowed_permissions: List[StrictStr] = Field(description="利用できる権限。permission_filteringがenabledの場合のみ指定可能。**権限の一覧を取得する**`/permissions`のcode値を指定します。")
    resource_filtering: StrictStr = Field(description="利用できるリソースを制限するか")
    allowed_resources: Optional[RoleAllowedResources]
    __properties: ClassVar[List[str]] = ["id", "name", "description", "permission_filtering", "allowed_permissions", "resource_filtering", "allowed_resources"]

    @field_validator('permission_filtering')
    def permission_filtering_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['enabled', 'disabled']):
            raise ValueError("must be one of enum values ('enabled', 'disabled')")
        return value

    @field_validator('resource_filtering')
    def resource_filtering_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['enabled', 'disabled']):
            raise ValueError("must be one of enum values ('enabled', 'disabled')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Role from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of allowed_resources
        if self.allowed_resources:
            _dict['allowed_resources'] = self.allowed_resources.to_dict()
        # set to None if allowed_resources (nullable) is None
        # and model_fields_set contains the field
        if self.allowed_resources is None and "allowed_resources" in self.model_fields_set:
            _dict['allowed_resources'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Role from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "permission_filtering": obj.get("permission_filtering"),
            "allowed_permissions": obj.get("allowed_permissions"),
            "resource_filtering": obj.get("resource_filtering"),
            "allowed_resources": RoleAllowedResources.from_dict(obj["allowed_resources"]) if obj.get("allowed_resources") is not None else None
        })
        return _obj


