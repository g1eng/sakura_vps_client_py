# coding: utf-8

"""
    さくらのVPS APIドキュメント

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 5.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from sakura_vps_client_py.models.server_contract import ServerContract
from sakura_vps_client_py.models.server_ipv4 import ServerIpv4
from sakura_vps_client_py.models.server_ipv6 import ServerIpv6
from sakura_vps_client_py.models.server_storage_inner import ServerStorageInner
from sakura_vps_client_py.models.server_zone import ServerZone
from typing import Optional, Set
from typing_extensions import Self

class Server(BaseModel):
    """
    Server
    """ # noqa: E501
    id: StrictInt = Field(description="id")
    name: StrictStr = Field(description="名前")
    description: StrictStr = Field(description="説明")
    service_type: StrictStr = Field(description="サービスタイプ")
    service_status: StrictStr = Field(description="サービス状況 * on_trial お試し中 * link_down_on_trial お試し中（一時停止） * in_use 利用中 * link_down 一時停止中")
    cpu_cores: StrictInt = Field(description="CPUコア数")
    memory_mebibytes: StrictInt = Field(description="メモリ容量(MiB)")
    storage: List[ServerStorageInner] = Field(description="ストレージ情報")
    zone: ServerZone
    options: List[StrictStr] = Field(description="オプション（追加ソフトウェア）")
    version: StrictStr = Field(description="プランの世代")
    ipv4: ServerIpv4
    ipv6: ServerIpv6
    contract: ServerContract
    power_status: StrictStr = Field(description="電源ステータス * power_on 電源ON * in_shutdown シャットダウン中 * power_off 電源OFF * installing OSインストール中 * in_scaleup スケールアップ中 * migration サーバー移行作業中 * unknown 不明（電源状態を取得できない） このエンドポイントが返す電源ステータスはキャッシュされた情報のため、最新の正確な電源ステータスが必要な場合は **サーバーの電源状態を取得する**`/servers/{server_id}/power-status`をご利用ください")
    __properties: ClassVar[List[str]] = ["id", "name", "description", "service_type", "service_status", "cpu_cores", "memory_mebibytes", "storage", "zone", "options", "version", "ipv4", "ipv6", "contract", "power_status"]

    @field_validator('service_type')
    def service_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['linux', 'windows']):
            raise ValueError("must be one of enum values ('linux', 'windows')")
        return value

    @field_validator('service_status')
    def service_status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['on_trial', 'link_down_on_trial', 'in_use', 'link_down']):
            raise ValueError("must be one of enum values ('on_trial', 'link_down_on_trial', 'in_use', 'link_down')")
        return value

    @field_validator('power_status')
    def power_status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['power_on', 'in_shutdown', 'power_off', 'installing', 'in_scaleup', 'migration', 'unknown']):
            raise ValueError("must be one of enum values ('power_on', 'in_shutdown', 'power_off', 'installing', 'in_scaleup', 'migration', 'unknown')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Server from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in storage (list)
        _items = []
        if self.storage:
            for _item_storage in self.storage:
                if _item_storage:
                    _items.append(_item_storage.to_dict())
            _dict['storage'] = _items
        # override the default output from pydantic by calling `to_dict()` of zone
        if self.zone:
            _dict['zone'] = self.zone.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ipv4
        if self.ipv4:
            _dict['ipv4'] = self.ipv4.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ipv6
        if self.ipv6:
            _dict['ipv6'] = self.ipv6.to_dict()
        # override the default output from pydantic by calling `to_dict()` of contract
        if self.contract:
            _dict['contract'] = self.contract.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Server from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "service_type": obj.get("service_type"),
            "service_status": obj.get("service_status"),
            "cpu_cores": obj.get("cpu_cores"),
            "memory_mebibytes": obj.get("memory_mebibytes"),
            "storage": [ServerStorageInner.from_dict(_item) for _item in obj["storage"]] if obj.get("storage") is not None else None,
            "zone": ServerZone.from_dict(obj["zone"]) if obj.get("zone") is not None else None,
            "options": obj.get("options"),
            "version": obj.get("version"),
            "ipv4": ServerIpv4.from_dict(obj["ipv4"]) if obj.get("ipv4") is not None else None,
            "ipv6": ServerIpv6.from_dict(obj["ipv6"]) if obj.get("ipv6") is not None else None,
            "contract": ServerContract.from_dict(obj["contract"]) if obj.get("contract") is not None else None,
            "power_status": obj.get("power_status")
        })
        return _obj


