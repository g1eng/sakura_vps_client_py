# coding: utf-8

"""
    さくらのVPS APIドキュメント

    Sakura VPS API client written in Python (generated with openapi-generator)

    The version of the OpenAPI document: 4.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class HealthCheckHttp(BaseModel):
    """
    HealthCheckHttp
    """ # noqa: E501
    port: Annotated[int, Field(le=65535, strict=True, ge=1)] = Field(description="ポート番号")
    host: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=63)]] = Field(description="監視用HTTPリクエストのHostヘッダ   RFCの定義に基づいて下記の制限をかけています * ラベルは2つ以上必要 * 各ラベルについて   * 利用できる文字     * 半角数字 0～9     * 半角英小文字 a～z     * 半角記号 -   * 両端が-でないこと   * -が2つ以上続かないこと。ただしpunycodeの接頭辞`xn--`を除く   * 下記パターン(RFCなどで予約または禁止されているパターン)と一致しないこと     * isatap     * wpad     * example     * example0～example9 * 最後のラベルについて   * 利用できる文字     * 半角英小文字 a～z   * 下記のパターン(RFC予約済みのDNS名)と一致しないこと     * test     * localhost")
    path: Annotated[str, Field(min_length=1, strict=True, max_length=1000)] = Field(description="監視対象のパス * 利用できる文字    * 半角数字 0～9   * 半角英字 A～Z、a～z   * 半角記号 _./~%?=-&")
    basic_auth_username: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=20)]] = Field(description="ベーシック認証のユーザー名 * 利用できる文字    * 半角数字 0～9   * 半角英字 A～Z、a～z   * 半角記号 _.-+!@")
    basic_auth_password: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=32)]] = Field(description="ベーシック認証のパスワード * 利用できる文字    * 半角数字 0～9   * 半角英字 A～Z、a～z   * 半角記号 !#$%&()*+,-./:<=>?@[]^_`{|}~")
    status: Annotated[int, Field(le=999, strict=True, ge=100)] = Field(description="正常と見なすHTTPステータスコード")
    interval_minutes: Annotated[int, Field(le=60, strict=True, ge=1)] = Field(description="チェック間隔(分)")
    protocol: StrictStr = Field(description="監視方法")
    __properties: ClassVar[List[str]] = ["port", "host", "path", "basic_auth_username", "basic_auth_password", "status", "interval_minutes", "protocol"]

    @field_validator('protocol')
    def protocol_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['http']):
            raise ValueError("must be one of enum values ('http')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HealthCheckHttp from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if host (nullable) is None
        # and model_fields_set contains the field
        if self.host is None and "host" in self.model_fields_set:
            _dict['host'] = None

        # set to None if basic_auth_username (nullable) is None
        # and model_fields_set contains the field
        if self.basic_auth_username is None and "basic_auth_username" in self.model_fields_set:
            _dict['basic_auth_username'] = None

        # set to None if basic_auth_password (nullable) is None
        # and model_fields_set contains the field
        if self.basic_auth_password is None and "basic_auth_password" in self.model_fields_set:
            _dict['basic_auth_password'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HealthCheckHttp from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "port": obj.get("port"),
            "host": obj.get("host"),
            "path": obj.get("path"),
            "basic_auth_username": obj.get("basic_auth_username"),
            "basic_auth_password": obj.get("basic_auth_password"),
            "status": obj.get("status"),
            "interval_minutes": obj.get("interval_minutes"),
            "protocol": obj.get("protocol")
        })
        return _obj


